// src/lib/prisma.js - Singleton PrismaClient corrig√©
import { PrismaClient } from '@prisma/client';

// Utiliser globalThis pour √©viter les conflits
const globalForPrisma = globalThis;

// Configuration optimis√©e pour la production
const prismaConfig = {
    // Log des requ√™tes en d√©veloppement seulement
    log: process.env.NODE_ENV === 'development'
        ? ['query', 'error', 'warn']
        : ['error'],

    // Configuration des erreurs plus d√©taill√©es en dev
    errorFormat: process.env.NODE_ENV === 'development' ? 'pretty' : 'minimal',
};

// Cr√©er ou r√©utiliser l'instance Prisma (nom diff√©rent pour √©viter le conflit)
const prismaInstance = globalForPrisma.prisma ?? new PrismaClient(prismaConfig);

// En d√©veloppement, stocker l'instance dans global pour √©viter les reconnexions
// lors du rechargement √† chaud (hot reload)
if (process.env.NODE_ENV !== 'production') {
    globalForPrisma.prisma = prismaInstance;
}

// Middleware pour g√©rer les erreurs de connexion
prismaInstance.$use(async (params, next) => {
    const start = Date.now();

    try {
        const result = await next(params);

        // Log des requ√™tes lentes en d√©veloppement
        if (process.env.NODE_ENV === 'development') {
            const duration = Date.now() - start;
            if (duration > 1000) { // Plus de 1 seconde
                console.warn(`üêå Requ√™te lente d√©tect√©e: ${params.model}.${params.action} (${duration}ms)`);
            }
        }

        return result;
    } catch (error) {
        const duration = Date.now() - start;
        console.error(`‚ùå Erreur DB apr√®s ${duration}ms:`, {
            model: params.model,
            action: params.action,
            error: error.message
        });
        throw error;
    }
});

// Gestion propre de la fermeture de l'application
process.on('beforeExit', async () => {
    console.log('üîå Fermeture de la connexion Prisma...');
    await prismaInstance.$disconnect();
});

process.on('SIGINT', async () => {
    console.log('üîå Arr√™t forc√© - Fermeture de la connexion Prisma...');
    await prismaInstance.$disconnect();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('üîå Arr√™t du processus - Fermeture de la connexion Prisma...');
    await prismaInstance.$disconnect();
    process.exit(0);
});

// Fonction utilitaire pour v√©rifier la connexion
export async function checkDatabaseConnection() {
    try {
        await prismaInstance.$queryRaw`SELECT 1`;
        console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');
        return true;
    } catch (error) {
        console.error('‚ùå Impossible de se connecter √† la base de donn√©es:', error);
        return false;
    }
}

// Export de l'instance (nom clair)
export const prisma = prismaInstance;

// Export par d√©faut pour faciliter l'import
export default prismaInstance;