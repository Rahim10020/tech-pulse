// lib/auth.js - Utilitaires d'authentification avec JWT
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET;
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '7d';

// Validation au d√©marrage de l'application
if (!JWT_SECRET) {
  console.error('üö® ERREUR CRITIQUE: JWT_SECRET manquant dans les variables d\'environnement');
  console.error('üí° Ajoutez JWT_SECRET="votre-cl√©-ultra-secr√®te" dans votre fichier .env');
  console.error('üîß G√©n√©rez une cl√© s√©curis√©e avec: openssl rand -base64 32');
  process.exit(1); // Arr√™ter l'application si pas de cl√©
}

// Validation de la qualit√© de la cl√©
if (JWT_SECRET.length < 32) {
  console.warn('‚ö†Ô∏è  ATTENTION: JWT_SECRET trop court (< 32 caract√®res)');
  console.warn('üîß Utilisez une cl√© plus longue pour une s√©curit√© optimale');
}

// Cr√©er un token JWT avec validation renforc√©e
export function createToken(payload) {
  try {
    // Ajouter des metadata de s√©curit√©
    const enhancedPayload = {
      ...payload,
      iat: Math.floor(Date.now() / 1000), // Issued at
      jti: crypto.randomUUID(), // JWT ID unique pour tracking
    };

    return jwt.sign(enhancedPayload, JWT_SECRET, { 
      expiresIn: JWT_EXPIRES_IN,
      algorithm: 'HS256', // Forcer l'algorithme pour √©viter les attaques
      issuer: 'techpulse-app',
      audience: 'techpulse-users'
    });
  } catch (error) {
    console.error('Erreur cr√©ation token JWT:', error);
    throw new Error('Impossible de cr√©er le token d\'authentification');
  }
}

// V√©rifier un token JWT avec validation renforc√©e
export function verifyToken(token) {
  try {
    if (!token || typeof token !== 'string') {
      return null;
    }

    const decoded = jwt.verify(token, JWT_SECRET, {
      algorithms: ['HS256'], // Accepter seulement HS256
      issuer: 'techpulse-app',
      audience: 'techpulse-users'
    });

    // V√©rifier que le token n'est pas trop ancien
    const now = Math.floor(Date.now() / 1000);
    const maxAge = 7 * 24 * 60 * 60; // 7 jours en secondes
    
    if (decoded.iat && (now - decoded.iat) > maxAge) {
      console.warn('Token trop ancien, consid√©r√© comme invalide');
      return null;
    }

    return decoded;
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      console.log('Token expir√©');
    } else if (error.name === 'JsonWebTokenError') {
      console.log('Token invalide');
    } else {
      console.error('Erreur v√©rification token:', error.message);
    }
    return null;
  }
}

// Nouvelle fonction : Blacklist des tokens (optionnel)
const tokenBlacklist = new Set();

export function blacklistToken(token) {
  const decoded = decodeToken(token);
  if (decoded?.jti) {
    tokenBlacklist.add(decoded.jti);
  }
}

export function isTokenBlacklisted(token) {
  const decoded = decodeToken(token);
  return decoded?.jti ? tokenBlacklist.has(decoded.jti) : false;
}

// Middleware am√©lior√© avec v√©rification blacklist
export function withAuth(handler) {
  return async (req, res) => {
    const token = req.cookies.token || req.headers.authorization?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({ 
        error: 'Token d\'authentification requis',
        code: 'MISSING_TOKEN'
      });
    }

    // V√©rifier si le token est blacklist√©
    if (isTokenBlacklisted(token)) {
      return res.status(401).json({ 
        error: 'Token r√©voqu√©',
        code: 'REVOKED_TOKEN'
      });
    }

    const decoded = verifyToken(token);
    if (!decoded) {
      return res.status(401).json({ 
        error: 'Token invalide ou expir√©',
        code: 'INVALID_TOKEN'
      });
    }

    // Ajouter les donn√©es utilisateur √† la requ√™te
    req.user = decoded;
    return handler(req, res);
  };
}