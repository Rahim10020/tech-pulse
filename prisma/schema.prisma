// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  username  String   @unique @db.VarChar(50)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  avatar    String?  @db.Text
  bio       String?  @db.Text
  joinedAt  DateTime @default(now()) @db.Timestamp(6)
  location  String?  @db.VarChar(100)
  website   String?  @db.VarChar(255)
  role      String   @default("reader") @db.VarChar(20)

  // Relations
  articles  Article[]
  comments  Comment[]
  likes     Like[]

  // Champs sociaux (optionnel)
  twitter   String?  @db.VarChar(100)
  linkedin  String?  @db.VarChar(255)
  github    String?  @db.VarChar(255)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  // Indexes for performance
  @@index([email])
  @@index([username])
  @@index([role])
  @@index([createdAt])

  @@map("users")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  slug        String    @unique @db.VarChar(100)
  description String?   @db.Text
  icon        String?   @db.VarChar(50)
  color       String?   @db.VarChar(20)
  textColor   String?   @db.VarChar(20)

  // Relations
  articles    Article[]

  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @db.Timestamp(6)

  // Indexes for performance
  @@index([slug])
  @@index([name])

  @@map("categories")
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(200)
  slug        String   @unique @db.VarChar(200)
  description String?  @db.Text
  content     String   @db.Text
  imageUrl    String?  @db.Text
  featured    Boolean  @default(false)
  published   Boolean  @default(true)
  publishedAt DateTime @default(now()) @db.Timestamp(6)
  readTime    String?  @db.VarChar(20)
  imageColor  String?  @db.VarChar(20)
  views       Int      @default(0)

  // Relations
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])

  tags        Tag[]
  comments    Comment[]
  likes       Like[]

  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)

  // Indexes for performance
  @@index([authorId])
  @@index([categoryId])
  @@index([published])
  @@index([featured])
  @@index([publishedAt])
  @@index([slug])
  @@index([published, publishedAt])
  @@index([published, featured, publishedAt])

  @@map("articles")
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  slug     String    @unique
  
  // Relations
  articles Article[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  likes     Int      @default(0)

  // Relations
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  articleId Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  // Auto-référence pour les réponses
  parentId  Int?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  // Indexes for performance
  @@index([articleId])
  @@index([authorId])
  @@index([parentId])
  @@index([createdAt])

  @@map("comments")
}

model Like {
  id        Int     @id @default(autoincrement())
  
  // Relations
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  articleId Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  // Un utilisateur ne peut liker qu'une fois par article
  @@unique([userId, articleId])
  @@map("likes")
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  isRead    Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(255)
  email     String   @db.VarChar(255)
  expiresAt DateTime @db.Timestamp(6)
  used      Boolean  @default(false)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  // Indexes for performance
  @@index([token])
  @@index([email])
  @@index([expiresAt])

  @@map("password_reset_tokens")
}

model PasswordResetCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(6)
  email     String   @db.VarChar(255)
  expiresAt DateTime @db.Timestamp(6)
  used      Boolean  @default(false)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  // Indexes for performance
  @@index([code])
  @@index([email])
  @@index([expiresAt])

  @@map("password_reset_codes")
}

model SiteSettings {
  id                Int      @id @default(autoincrement())
  siteName          String   @default("pixelpulse")
  siteDescription   String?  @db.Text
  siteUrl           String?
  contactEmail      String?
  contactPhone      String?
  contactAddress    String?
  socialTwitter      String?
  socialLinkedin    String?
  socialGithub      String?
  analyticsCode      String?  @db.Text
  seoTitle          String?
  seoDescription    String?
  seoKeywords       String?
  maintenanceMode   Boolean  @default(false)
  allowComments     Boolean  @default(true)
  allowRegistration Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("site_settings")
}